// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: scope.sql

package db

import (
	"context"
	"database/sql"
)

const createScope = `-- name: CreateScope :one
INSERT INTO scopes (
    name,
    description,
    resource_server_name
) VALUES (
    $1, $2, $3
) RETURNING id, name, description, resource_server_id, resource_server_name, status
`

type CreateScopeParams struct {
	Name               string         `json:"name"`
	Description        string         `json:"description"`
	ResourceServerName sql.NullString `json:"resource_server_name"`
}

func (q *Queries) CreateScope(ctx context.Context, arg CreateScopeParams) (Scope, error) {
	row := q.db.QueryRow(ctx, createScope, arg.Name, arg.Description, arg.ResourceServerName)
	var i Scope
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ResourceServerID,
		&i.ResourceServerName,
		&i.Status,
	)
	return i, err
}

const deleteScope = `-- name: DeleteScope :one
DELETE FROM scopes WHERE name = $1 RETURNING id, name, description, resource_server_id, resource_server_name, status
`

func (q *Queries) DeleteScope(ctx context.Context, name string) (Scope, error) {
	row := q.db.QueryRow(ctx, deleteScope, name)
	var i Scope
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ResourceServerID,
		&i.ResourceServerName,
		&i.Status,
	)
	return i, err
}

const getScope = `-- name: GetScope :one
SELECT id, name, description, resource_server_id, resource_server_name, status FROM scopes WHERE name = $1
`

func (q *Queries) GetScope(ctx context.Context, name string) (Scope, error) {
	row := q.db.QueryRow(ctx, getScope, name)
	var i Scope
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ResourceServerID,
		&i.ResourceServerName,
		&i.Status,
	)
	return i, err
}
