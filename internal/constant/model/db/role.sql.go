// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: role.sql

package db

import (
	"context"
	"database/sql"
)

const addRole = `-- name: AddRole :one
INSERT INTO roles (name, status)
VALUES ($1, $2)
RETURNING name, status, created_at, updated_at
`

type AddRoleParams struct {
	Name   string         `json:"name"`
	Status sql.NullString `json:"status"`
}

func (q *Queries) AddRole(ctx context.Context, arg AddRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, addRole, arg.Name, arg.Status)
	var i Role
	err := row.Scan(
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :one
DELETE
FROM roles
where name = $1
RETURNING name, status, created_at, updated_at
`

func (q *Queries) DeleteRole(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, deleteRole, name)
	var i Role
	err := row.Scan(
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllRoles = `-- name: GetAllRoles :many
SELECT name, status, created_at, updated_at
FROM roles
`

func (q *Queries) GetAllRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, getAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.Name,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT name, status, created_at, updated_at
FROM roles
WHERE name = $1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRoleStatus = `-- name: GetRoleStatus :one
SELECT status
FROM roles
WHERE name = $1
`

func (q *Queries) GetRoleStatus(ctx context.Context, name string) (sql.NullString, error) {
	row := q.db.QueryRow(ctx, getRoleStatus, name)
	var status sql.NullString
	err := row.Scan(&status)
	return status, err
}
