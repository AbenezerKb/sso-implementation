// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: internal_refreshtoken.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const removeInternalRefreshToken = `-- name: RemoveInternalRefreshToken :exec
DELETE FROM internalrefreshtokens WHERE user_id = $1
`

func (q *Queries) RemoveInternalRefreshToken(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeInternalRefreshToken, userID)
	return err
}

const saveInternalRefreshToken = `-- name: SaveInternalRefreshToken :one
INSERT INTO internalrefreshtokens (
    expires_at,
    user_id,
    refreshtoken
) VALUES (
    $1, $2, $3
)
RETURNING id, refreshtoken, user_id, expires_at, created_at, updated_at
`

type SaveInternalRefreshTokenParams struct {
	ExpiresAt    time.Time `json:"expires_at"`
	UserID       uuid.UUID `json:"user_id"`
	Refreshtoken string    `json:"refreshtoken"`
}

func (q *Queries) SaveInternalRefreshToken(ctx context.Context, arg SaveInternalRefreshTokenParams) (Internalrefreshtoken, error) {
	row := q.db.QueryRow(ctx, saveInternalRefreshToken, arg.ExpiresAt, arg.UserID, arg.Refreshtoken)
	var i Internalrefreshtoken
	err := row.Scan(
		&i.ID,
		&i.Refreshtoken,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
