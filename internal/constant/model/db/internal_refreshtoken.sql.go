// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: internal_refreshtoken.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getInternalRefreshToken = `-- name: GetInternalRefreshToken :one
SELECT id, refresh_token, user_id, ip_address, user_agent, expires_at, created_at, updated_at FROM internalrefreshtokens WHERE refresh_token = $1
`

func (q *Queries) GetInternalRefreshToken(ctx context.Context, refreshToken string) (Internalrefreshtoken, error) {
	row := q.db.QueryRow(ctx, getInternalRefreshToken, refreshToken)
	var i Internalrefreshtoken
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInternalRefreshTokensByUserID = `-- name: GetInternalRefreshTokensByUserID :many
SELECT id, refresh_token, user_id, ip_address, user_agent, expires_at, created_at, updated_at FROM internalrefreshtokens WHERE user_id = $1
`

func (q *Queries) GetInternalRefreshTokensByUserID(ctx context.Context, userID uuid.UUID) ([]Internalrefreshtoken, error) {
	rows, err := q.db.Query(ctx, getInternalRefreshTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Internalrefreshtoken
	for rows.Next() {
		var i Internalrefreshtoken
		if err := rows.Scan(
			&i.ID,
			&i.RefreshToken,
			&i.UserID,
			&i.IpAddress,
			&i.UserAgent,
			&i.ExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeInternalRefreshToken = `-- name: RemoveInternalRefreshToken :exec
DELETE FROM internalrefreshtokens WHERE refresh_token =$1
`

func (q *Queries) RemoveInternalRefreshToken(ctx context.Context, refreshToken string) error {
	_, err := q.db.Exec(ctx, removeInternalRefreshToken, refreshToken)
	return err
}

const removeInternalRefreshTokenByUserID = `-- name: RemoveInternalRefreshTokenByUserID :exec
DELETE FROM internalrefreshtokens WHERE id = $1
`

func (q *Queries) RemoveInternalRefreshTokenByUserID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeInternalRefreshTokenByUserID, id)
	return err
}

const saveInternalRefreshToken = `-- name: SaveInternalRefreshToken :one
INSERT INTO internalrefreshtokens (
    expires_at,
    user_id,
    refresh_token,
    ip_address,
    user_agent
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, refresh_token, user_id, ip_address, user_agent, expires_at, created_at, updated_at
`

type SaveInternalRefreshTokenParams struct {
	ExpiresAt    time.Time `json:"expires_at"`
	UserID       uuid.UUID `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	IpAddress    string    `json:"ip_address"`
	UserAgent    string    `json:"user_agent"`
}

func (q *Queries) SaveInternalRefreshToken(ctx context.Context, arg SaveInternalRefreshTokenParams) (Internalrefreshtoken, error) {
	row := q.db.QueryRow(ctx, saveInternalRefreshToken,
		arg.ExpiresAt,
		arg.UserID,
		arg.RefreshToken,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i Internalrefreshtoken
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateInternalRefreshToken = `-- name: UpdateInternalRefreshToken :one
UPDATE internalrefreshtokens SET refresh_token=$2, updated_at=now() WHERE refresh_token=$1 RETURNING id, refresh_token, user_id, ip_address, user_agent, expires_at, created_at, updated_at
`

type UpdateInternalRefreshTokenParams struct {
	RefreshToken   string `json:"refresh_token"`
	RefreshToken_2 string `json:"refresh_token_2"`
}

func (q *Queries) UpdateInternalRefreshToken(ctx context.Context, arg UpdateInternalRefreshTokenParams) (Internalrefreshtoken, error) {
	row := q.db.QueryRow(ctx, updateInternalRefreshToken, arg.RefreshToken, arg.RefreshToken_2)
	var i Internalrefreshtoken
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :one
Update internalrefreshtokens set expires_at = $2, refresh_token= $3 WHERE id= $1 RETURNING id, refresh_token, user_id, ip_address, user_agent, expires_at, created_at, updated_at
`

type UpdateRefreshTokenParams struct {
	ID           uuid.UUID `json:"id"`
	ExpiresAt    time.Time `json:"expires_at"`
	RefreshToken string    `json:"refresh_token"`
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) (Internalrefreshtoken, error) {
	row := q.db.QueryRow(ctx, updateRefreshToken, arg.ID, arg.ExpiresAt, arg.RefreshToken)
	var i Internalrefreshtoken
	err := row.Scan(
		&i.ID,
		&i.RefreshToken,
		&i.UserID,
		&i.IpAddress,
		&i.UserAgent,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
