// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: ip_access_token.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getIPAccessTokenBySubAndIP = `-- name: GetIPAccessTokenBySubAndIP :one
SELECT id, user_id, sub_id, ip_id, token, refresh_token, status, created_at, updated_at
FROM ip_access_tokens
WHERE sub_id = $1
  AND ip_id = $2
`

type GetIPAccessTokenBySubAndIPParams struct {
	SubID string    `json:"sub_id"`
	IpID  uuid.UUID `json:"ip_id"`
}

func (q *Queries) GetIPAccessTokenBySubAndIP(ctx context.Context, arg GetIPAccessTokenBySubAndIPParams) (IpAccessToken, error) {
	row := q.db.QueryRow(ctx, getIPAccessTokenBySubAndIP, arg.SubID, arg.IpID)
	var i IpAccessToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubID,
		&i.IpID,
		&i.Token,
		&i.RefreshToken,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const saveIPAccessToken = `-- name: SaveIPAccessToken :one
INSERT INTO ip_access_tokens (user_id, sub_id, ip_id, token, refresh_token)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, sub_id, ip_id, token, refresh_token, status, created_at, updated_at
`

type SaveIPAccessTokenParams struct {
	UserID       uuid.UUID      `json:"user_id"`
	SubID        string         `json:"sub_id"`
	IpID         uuid.UUID      `json:"ip_id"`
	Token        string         `json:"token"`
	RefreshToken sql.NullString `json:"refresh_token"`
}

func (q *Queries) SaveIPAccessToken(ctx context.Context, arg SaveIPAccessTokenParams) (IpAccessToken, error) {
	row := q.db.QueryRow(ctx, saveIPAccessToken,
		arg.UserID,
		arg.SubID,
		arg.IpID,
		arg.Token,
		arg.RefreshToken,
	)
	var i IpAccessToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubID,
		&i.IpID,
		&i.Token,
		&i.RefreshToken,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateIPAccessToken = `-- name: UpdateIPAccessToken :one
UPDATE ip_access_tokens
SET token         = $1,
    refresh_token = coalesce($2, refresh_token)
WHERE sub_id = $3
  AND ip_id = $4
RETURNING id, user_id, sub_id, ip_id, token, refresh_token, status, created_at, updated_at
`

type UpdateIPAccessTokenParams struct {
	Token        string         `json:"token"`
	RefreshToken sql.NullString `json:"refresh_token"`
	SubID        string         `json:"sub_id"`
	IpID         uuid.UUID      `json:"ip_id"`
}

func (q *Queries) UpdateIPAccessToken(ctx context.Context, arg UpdateIPAccessTokenParams) (IpAccessToken, error) {
	row := q.db.QueryRow(ctx, updateIPAccessToken,
		arg.Token,
		arg.RefreshToken,
		arg.SubID,
		arg.IpID,
	)
	var i IpAccessToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubID,
		&i.IpID,
		&i.Token,
		&i.RefreshToken,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
