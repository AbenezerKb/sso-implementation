basePath: /v1
definitions:
  dto.Client:
    properties:
      client_type:
        description: |-
          ClientType is the type of the client.
          It can be either confidential or public.
        type: string
      id:
        description: |-
          ID is the unique identifier for the client.
          It is automatically generated when the client is registered.
        type: string
      logo_url:
        description: |-
          LogoURL is the URL of the client's logo.
          It must be a valid URL.
        type: string
      name:
        description: Name is the name of the client that will be displayed to the
          user.
        type: string
      redirect_uris:
        description: |-
          RedirectURIs is the list of redirect URIs of the client.
          Each redirect URI must be a valid URL and must use HTTPS.
        items:
          type: string
        type: array
      scopes:
        description: Scopes is the list of default scopes of the client if one is
          not provided.
        type: string
      secret:
        description: |-
          Secret is the secret the client uses to authenticate itself.
          It is automatically generated when the client is registered.
        type: string
      status:
        description: |-
          Status is the current status of the client.
          It is set to active by default.
        type: string
    type: object
  dto.ConsentData:
    properties:
      approved:
        description: The consent status.
        type: boolean
      client:
        $ref: '#/definitions/dto.Client'
        description: The client data
      client_id:
        description: The client identifier.
        type: string
      id:
        type: string
      redirect_uri:
        description: The redirection URI used in the initial authorization request.
        type: string
      response_type:
        description: The redirection URI used in the initial authorization request.
        type: string
      roles:
        description: Roles of the user.
        type: string
      scope:
        description: The scope of the access request expressed as a list of space-delimited,
        type: string
      scopes:
        description: The scope data
        items:
          $ref: '#/definitions/dto.Scope'
        type: array
      state:
        description: the state parameter passed in the initial authorization request.
        type: string
      user:
        $ref: '#/definitions/dto.User'
        description: The user data
      userID:
        description: Users Id
        type: string
    type: object
  dto.CreateUser:
    properties:
      created_at:
        description: |-
          CreatedAt is the time when the user is created.
          It is automatically set when the user is created.
        type: string
      email:
        description: Email is the email of the user.
        type: string
      first_name:
        description: FirstName is the first name of the user.
        type: string
      gender:
        description: Gender is the gender of the user.
        type: string
      id:
        description: |-
          ID is the unique identifier of the user.
          It is automatically generated when the user is created.
        type: string
      last_name:
        description: LastName is the last name of the user.
        type: string
      middle_name:
        description: MiddleName is the middle name of the user.
        type: string
      password:
        description: |-
          Password is the password of the user.
          It is only used for logging in with email
        type: string
      phone:
        description: Phone is the phone of the user.
        type: string
      profile_picture:
        description: |-
          ProfilePicture is the profile picture of the user.
          It is set on a separate setProfilePicture endpoint.
        type: string
      role:
        description: Role is the role given to the user being created.
        type: string
      user_name:
        description: |-
          UserName is the username of the user.
          It is currently of no use
        type: string
    type: object
  dto.LoginCredential:
    properties:
      email:
        description: Email of the user if for login with password
        type: string
      otp:
        description: OTP generated from phone number
        type: string
      password:
        description: Password of the user if for login with password
        type: string
      phone:
        description: Phone number of the user if for login with otp
        type: string
    type: object
  dto.RegisterUser:
    properties:
      created_at:
        description: |-
          CreatedAt is the time when the user is created.
          It is automatically set when the user is created.
        type: string
      email:
        description: Email is the email of the user.
        type: string
      first_name:
        description: FirstName is the first name of the user.
        type: string
      gender:
        description: Gender is the gender of the user.
        type: string
      id:
        description: |-
          ID is the unique identifier of the user.
          It is automatically generated when the user is created.
        type: string
      last_name:
        description: LastName is the last name of the user.
        type: string
      middle_name:
        description: MiddleName is the middle name of the user.
        type: string
      otp:
        description: OTP is the one time password of the user.
        type: string
      password:
        description: |-
          Password is the password of the user.
          It is only used for logging in with email
        type: string
      phone:
        description: Phone is the phone of the user.
        type: string
      profile_picture:
        description: |-
          ProfilePicture is the profile picture of the user.
          It is set on a separate setProfilePicture endpoint.
        type: string
      user_name:
        description: |-
          UserName is the username of the user.
          It is currently of no use
        type: string
    type: object
  dto.Scope:
    properties:
      description:
        description: The scope description.
        type: string
      name:
        description: The scope name.
        type: string
    type: object
  dto.TokenResponse:
    properties:
      access_token:
        description: AccessToken is the access token for the current login
        type: string
      id_token:
        description: IDToken is the OpenID specific JWT token
        type: string
      refresh_token:
        description: RefreshToken is the refresh token for the access token
        type: string
      token_type:
        description: TokenType is the type of token
        type: string
    type: object
  dto.User:
    properties:
      created_at:
        description: |-
          CreatedAt is the time when the user is created.
          It is automatically set when the user is created.
        type: string
      email:
        description: Email is the email of the user.
        type: string
      first_name:
        description: FirstName is the first name of the user.
        type: string
      gender:
        description: Gender is the gender of the user.
        type: string
      id:
        description: |-
          ID is the unique identifier of the user.
          It is automatically generated when the user is created.
        type: string
      last_name:
        description: LastName is the last name of the user.
        type: string
      middle_name:
        description: MiddleName is the middle name of the user.
        type: string
      password:
        description: |-
          Password is the password of the user.
          It is only used for logging in with email
        type: string
      phone:
        description: Phone is the phone of the user.
        type: string
      profile_picture:
        description: |-
          ProfilePicture is the profile picture of the user.
          It is set on a separate setProfilePicture endpoint.
        type: string
      user_name:
        description: |-
          UserName is the username of the user.
          It is currently of no use
        type: string
    type: object
  model.ErrorResponse:
    properties:
      code:
        description: Code is the error code. It is not status code
        type: integer
      description:
        description: Description is the error description.
        type: string
      field_error:
        description: FieldError is the error detail for each field, if available that
          is.
        items:
          $ref: '#/definitions/model.FieldError'
        type: array
      message:
        description: Message is the error message.
        type: string
      stack_trace:
        description: |-
          StackTrace is the stack trace of the error.
          It is only returned for debugging
        type: string
    type: object
  model.FieldError:
    properties:
      description:
        description: Description is the error description for this field.
        type: string
      name:
        description: Name is the name of the field that caused the error.
        type: string
    type: object
host: 206.189.54.235:8000
info:
  contact:
    email: info@1f-capital.com
    name: 2F Capital Support Email
    url: http://www.2fcapital.com
  description: This is the RidePLUS sso api.
  title: RidePLUS SSO API
  version: "0.1"
paths:
  /approval:
    get:
      consumes:
      - application/json
      description: is used to approve consent.
      parameters:
      - description: consentId
        in: query
        name: consentId
        required: true
        type: string
      - description: access
        in: query
        name: access
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Location:
              description: redirect_uri
              type: string
        "400":
          description: invalid input
          headers:
            Location:
              description: redirect_uri
              type: string
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Approval.
      tags:
      - auth
  /authorize:
    get:
      consumes:
      - application/json
      description: is used to obtain authorization code.
      parameters:
      - description: code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Location:
              description: redirect_uri
              type: string
        "400":
          description: Bad Request
          headers:
            Location:
              description: redirect_uri
              type: string
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Authorize.
      tags:
      - auth
  /clients:
    post:
      consumes:
      - application/json
      description: Create a new client
      parameters:
      - description: client
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/dto.Client'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a client
      tags:
      - client
  /consent/{id}:
    get:
      consumes:
      - application/json
      description: is used to get consent by id.
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ConsentData'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: GetConsentByID.
      tags:
      - auth
  /login:
    post:
      consumes:
      - application/json
      description: Login a user.
      parameters:
      - description: login_credential
        in: body
        name: login_credential
        required: true
        schema:
          $ref: '#/definitions/dto.LoginCredential'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: invalid credentials
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Login a user.
      tags:
      - auth
  /otp:
    get:
      consumes:
      - application/json
      description: is used to request otp for login and signup
      parameters:
      - description: phone
        in: query
        name: phone
        required: true
        type: string
      - description: type can be login or signup
        enum:
        - login
        - signup
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Request otp.
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user.
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Register a new user.
      tags:
      - auth
  /users:
    post:
      consumes:
      - application/json
      description: create a new user.
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: create a new user.
      tags:
      - user
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
