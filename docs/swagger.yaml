basePath: /v1
definitions:
  dto.AccessTokenRequest:
    properties:
      code:
        description: Authorization code generated by the authorization server.
        type: string
      grant_type:
        description: |-
          GrantType is the type of flow the client is following to get access token.
          It can be either authorization_code or refresh_token.
        type: string
      redirect_uri:
        description: Redirection URI used in the initial authorization request.
        type: string
      refresh_token:
        description: |-
          RefreshToken is the opaque string that was given by the auth server when issuing the access token.
          it's used to refresh the access token.
        type: string
    type: object
  dto.AuthorizedClientsResponse:
    properties:
      auth_scopes:
        description: AuthScopes is the scopes this authorization is given access to
        items:
          $ref: '#/definitions/dto.Scope'
        type: array
      client_type:
        description: |-
          ClientType is the type of the client.
          It can be either confidential or public.
        type: string
      created_at:
        description: AuthGivenAt is the time this client is given authorization at
        type: string
      expires_at:
        description: AuthExpiresAt is the time this authorization expires at
        type: string
      id:
        description: |-
          ID is the unique identifier for the client.
          It is automatically generated when the client is registered.
        type: string
      logo_url:
        description: |-
          LogoURL is the URL of the client's logo.
          It must be a valid URL.
        type: string
      name:
        description: Name is the name of the client that will be displayed to the
          user.
        type: string
      redirect_uris:
        description: |-
          RedirectURIs is the list of redirect URIs of the client.
          Each redirect URI must be a valid URL and must use HTTPS.
        items:
          type: string
        type: array
      scopes:
        description: Scopes is the list of default scopes of the client if one is
          not provided.
        type: string
      secret:
        description: |-
          Secret is the secret the client uses to authenticate itself.
          It is automatically generated when the client is registered.
        type: string
      status:
        description: |-
          Status is the current status of the client.
          It is set to active by default.
        type: string
      updated_at:
        description: AuthUpdatedAt is the time this authorization is last updated
          at
        type: string
    type: object
  dto.Client:
    properties:
      client_type:
        description: |-
          ClientType is the type of the client.
          It can be either confidential or public.
        type: string
      created_at:
        description: CreatedAt is the time this client was created at
        type: string
      id:
        description: |-
          ID is the unique identifier for the client.
          It is automatically generated when the client is registered.
        type: string
      logo_url:
        description: |-
          LogoURL is the URL of the client's logo.
          It must be a valid URL.
        type: string
      name:
        description: Name is the name of the client that will be displayed to the
          user.
        type: string
      redirect_uris:
        description: |-
          RedirectURIs is the list of redirect URIs of the client.
          Each redirect URI must be a valid URL and must use HTTPS.
        items:
          type: string
        type: array
      scopes:
        description: Scopes is the list of default scopes of the client if one is
          not provided.
        type: string
      secret:
        description: |-
          Secret is the secret the client uses to authenticate itself.
          It is automatically generated when the client is registered.
        type: string
      status:
        description: |-
          Status is the current status of the client.
          It is set to active by default.
        type: string
    type: object
  dto.ConsentResponse:
    properties:
      approved:
        description: Approved tells if this exact scope is previously approved by
          this user
        type: boolean
      client_id:
        description: ClientID is the id of the client given at the time of registration
        type: string
      client_logo:
        description: ClientLogo is the logo url of the client
        type: string
      client_name:
        description: ClientName is the name of the client
        type: string
      client_trusted:
        description: ClientTrusted tells if this client is a trusted first party client
        type: boolean
      client_type:
        description: |-
          ClientType is the type of the client
          It might be confidential or public
        type: string
      scopes:
        description: Scopes is the list of scopes this consent holds
        items:
          $ref: '#/definitions/dto.Scope'
        type: array
      user_id:
        description: UserID is the id of the user this consent is being given to
        type: string
    type: object
  dto.CreateUser:
    properties:
      created_at:
        description: |-
          CreatedAt is the time when the user is created.
          It is automatically set when the user is created.
        type: string
      email:
        description: Email is the email of the user.
        type: string
      first_name:
        description: FirstName is the first name of the user.
        type: string
      gender:
        description: Gender is the gender of the user.
        type: string
      id:
        description: |-
          ID is the unique identifier of the user.
          It is automatically generated when the user is created.
        type: string
      last_name:
        description: LastName is the last name of the user.
        type: string
      middle_name:
        description: MiddleName is the middle name of the user.
        type: string
      password:
        description: |-
          Password is the password of the user.
          It is only used for logging in with email
        type: string
      phone:
        description: Phone is the phone of the user.
        type: string
      profile_picture:
        description: |-
          ProfilePicture is the profile picture of the user.
          It is set on a separate setProfilePicture endpoint.
        type: string
      role:
        description: Role is the role given to the user being created.
        type: string
      status:
        description: |-
          Status is the status of the user.
          It is set to active by default after successful registration.
        type: string
      user_name:
        description: |-
          UserName is the username of the user.
          It is currently of no use
        type: string
    type: object
  dto.InternalRefreshTokenRequestBody:
    properties:
      refresh_token:
        description: RefreshToken is the opaque string users uses to refresh access
          token.
        type: string
    type: object
  dto.LoginCredential:
    properties:
      email:
        description: Email of the user if for login with password
        type: string
      otp:
        description: OTP generated from phone number
        type: string
      password:
        description: Password of the user if for login with password
        type: string
      phone:
        description: Phone number of the user if for login with otp
        type: string
    type: object
  dto.MiniRideResponse:
    properties:
      exists:
        type: boolean
      user:
        $ref: '#/definitions/dto.User'
    type: object
  dto.RedirectResponse:
    properties:
      location:
        description: Location is the url of the client or an error page of the front-end
          that must be navigated to
        type: string
    type: object
  dto.RegisterUser:
    properties:
      created_at:
        description: |-
          CreatedAt is the time when the user is created.
          It is automatically set when the user is created.
        type: string
      email:
        description: Email is the email of the user.
        type: string
      first_name:
        description: FirstName is the first name of the user.
        type: string
      gender:
        description: Gender is the gender of the user.
        type: string
      id:
        description: |-
          ID is the unique identifier of the user.
          It is automatically generated when the user is created.
        type: string
      last_name:
        description: LastName is the last name of the user.
        type: string
      middle_name:
        description: MiddleName is the middle name of the user.
        type: string
      otp:
        description: OTP is the one time password of the user.
        type: string
      password:
        description: |-
          Password is the password of the user.
          It is only used for logging in with email
        type: string
      phone:
        description: Phone is the phone of the user.
        type: string
      profile_picture:
        description: |-
          ProfilePicture is the profile picture of the user.
          It is set on a separate setProfilePicture endpoint.
        type: string
      status:
        description: |-
          Status is the status of the user.
          It is set to active by default after successful registration.
        type: string
      user_name:
        description: |-
          UserName is the username of the user.
          It is currently of no use
        type: string
    type: object
  dto.ResourceServer:
    properties:
      created_at:
        description: CreatedAt is the time this resource server is created at
        type: string
      id:
        description: ID is the unique id for this resource server
        type: string
      name:
        description: |-
          Name is the resource server name.
          It must be unique across the sso
        type: string
      scopes:
        description: Scopes is the scopes of this resource server
        items:
          $ref: '#/definitions/dto.Scope'
        type: array
      updated_at:
        description: UpdatedAt is the time this resource server is updated at
        type: string
    type: object
  dto.Scope:
    properties:
      created_at:
        description: date the scope created
        type: string
      description:
        description: The scope description.
        type: string
      name:
        description: The scope name.
        type: string
      resource_server_name:
        description: resource server name
        type: string
    type: object
  dto.TokenResponse:
    properties:
      access_token:
        description: AccessToken is the access token for the current login
        type: string
      expires_in:
        description: ExpiresAt is time the access token is going to be expired.
        type: string
      id_token:
        description: IDToken is the OpenID specific JWT token
        type: string
      refresh_token:
        description: RefreshToken is the refresh token for the access token
        type: string
      token_type:
        description: TokenType is the type of token
        type: string
    type: object
  dto.UpdateClientStatus:
    properties:
      status:
        description: Status is new status that will replace old status of the user
        type: string
    type: object
  dto.User:
    properties:
      created_at:
        description: |-
          CreatedAt is the time when the user is created.
          It is automatically set when the user is created.
        type: string
      email:
        description: Email is the email of the user.
        type: string
      first_name:
        description: FirstName is the first name of the user.
        type: string
      gender:
        description: Gender is the gender of the user.
        type: string
      id:
        description: |-
          ID is the unique identifier of the user.
          It is automatically generated when the user is created.
        type: string
      last_name:
        description: LastName is the last name of the user.
        type: string
      middle_name:
        description: MiddleName is the middle name of the user.
        type: string
      password:
        description: |-
          Password is the password of the user.
          It is only used for logging in with email
        type: string
      phone:
        description: Phone is the phone of the user.
        type: string
      profile_picture:
        description: |-
          ProfilePicture is the profile picture of the user.
          It is set on a separate setProfilePicture endpoint.
        type: string
      status:
        description: |-
          Status is the status of the user.
          It is set to active by default after successful registration.
        type: string
      user_name:
        description: |-
          UserName is the username of the user.
          It is currently of no use
        type: string
    type: object
  model.ErrorResponse:
    properties:
      code:
        description: Code is the error code. It is not status code
        type: integer
      description:
        description: Description is the error description.
        type: string
      field_error:
        description: FieldError is the error detail for each field, if available that
          is.
        items:
          $ref: '#/definitions/model.FieldError'
        type: array
      message:
        description: Message is the error message.
        type: string
      stack_trace:
        description: |-
          StackTrace is the stack trace of the error.
          It is only returned for debugging
        type: string
    type: object
  model.FieldError:
    properties:
      description:
        description: Description is the error description for this field.
        type: string
      name:
        description: Name is the name of the field that caused the error.
        type: string
    type: object
  model.MetaData:
    properties:
      extra:
        description: Extra contains other response specific data
      filter:
        items:
          $ref: '#/definitions/request_models.Filter'
        type: array
      link_operator:
        type: string
      page:
        type: integer
      per_page:
        type: integer
      sort:
        items:
          $ref: '#/definitions/request_models.Sort'
        type: array
      total:
        description: Total is the total number of data without pagination
        type: integer
    type: object
  model.Response:
    properties:
      data:
        description: Data contains the actual data of the response.
      error:
        $ref: '#/definitions/model.ErrorResponse'
        description: Error contains the error detail if the request was not successful.
      meta_data:
        $ref: '#/definitions/model.MetaData'
        description: MetaData contains additional data like filtering, pagination,
          etc.
      ok:
        description: OK is only true if the request was successful.
        type: boolean
    type: object
  permissions.Permission:
    properties:
      category:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  request_models.Filter:
    properties:
      column_field:
        type: string
      operator_value:
        type: string
      value:
        type: string
    type: object
  request_models.RevokeClientBody:
    properties:
      client_id:
        description: |-
          ClientID is the id of the client to be revoked access of.
          It is a required field
        type: string
    type: object
  request_models.Sort:
    properties:
      field:
        type: string
      sort:
        type: string
    type: object
host: 206.189.54.235:8000
info:
  contact:
    email: info@1f-capital.com
    name: 2F Capital Support Email
    url: http://www.2fcapital.com
  description: This is the RidePLUS sso api.
  title: RidePLUS SSO API
  version: "0.1"
paths:
  /clients:
    get:
      consumes:
      - application/json
      description: returns all clients based on the filters and pagination given
      parameters:
      - in: query
        name: filter
        type: string
      - in: query
        name: link_operator
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: per_page
        type: integer
      - in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Client'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: returns all clients that satisfy the given filters
      tags:
      - client
    post:
      consumes:
      - application/json
      description: Create a new client
      parameters:
      - description: client
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/dto.Client'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a client
      tags:
      - client
  /clients/{id}:
    delete:
      consumes:
      - application/json
      description: Delete  client
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete  client
      tags:
      - client
    get:
      consumes:
      - application/json
      description: returns client that holds given id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Client'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: returns client
      tags:
      - client
  /clients/{id}/status:
    patch:
      consumes:
      - application/json
      description: changes client status so that they can revoke client's
      parameters:
      - description: status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateClientStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: changes client status
      tags:
      - client
  /login:
    post:
      consumes:
      - application/json
      description: Login a user.
      parameters:
      - description: login_credential
        in: body
        name: login_credential
        required: true
        schema:
          $ref: '#/definitions/dto.LoginCredential'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: invalid credentials
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Login a user.
      tags:
      - auth
  /logout:
    post:
      consumes:
      - application/json
      description: logout user.
      parameters:
      - description: logoutParam
        in: body
        name: tokenParam
        required: true
        schema:
          $ref: '#/definitions/dto.InternalRefreshTokenRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: logout  user.
      tags:
      - auth
  /oauth/approveConsent:
    post:
      consumes:
      - application/json
      description: is used to approve consent.
      parameters:
      - description: consent_id
        in: body
        name: consent_id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: redirect response
          headers:
            Location:
              description: redirect_uri
              type: string
          schema:
            $ref: '#/definitions/dto.RedirectResponse'
        "400":
          description: invalid input
          headers:
            Location:
              description: redirect_uri
              type: string
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Consent Approval..
      tags:
      - OAuth2
  /oauth/authorize:
    get:
      consumes:
      - application/json
      description: is used to obtain authorization code.
      parameters:
      - description: response_type
        in: query
        name: response_type
        required: true
        type: string
      - description: client_id
        in: query
        name: client_id
        required: true
        type: string
      - description: state
        in: query
        name: state
        required: true
        type: string
      - description: scope
        in: query
        name: scope
        required: true
        type: string
      - description: redirect_uri
        in: query
        name: redirect_uri
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Location:
              description: redirect_uri
              type: string
        "400":
          description: Bad Request
          headers:
            Location:
              description: redirect_uri
              type: string
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Authorize.
      tags:
      - OAuth2
  /oauth/authorizedClients:
    get:
      consumes:
      - application/json
      description: It returns all clients that have resource access other than openid
        for the logged in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.AuthorizedClientsResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: returns all authorized clients
      tags:
      - OAuth2
  /oauth/consent/{id}:
    get:
      consumes:
      - application/json
      description: is used to get consent by id.
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: user_id
        in: query
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ConsentResponse'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: GetConsentByID.
      tags:
      - OAuth2
  /oauth/logout:
    get:
      consumes:
      - application/json
      description: this is requested from truest client only.
      parameters:
      - description: id_token_hint
        in: query
        name: id_token_hint
        required: true
        type: string
      - description: post_logout_redirect_uri
        in: query
        name: post_logout_redirect_uri
        required: true
        type: string
      - description: state
        in: query
        name: state
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          headers:
            Location:
              description: redirect_uri
              type: string
        "400":
          description: Bad Request
          headers:
            Location:
              description: redirect_uri
              type: string
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: rp-logout.
      tags:
      - OAuth2
  /oauth/openIDAuthorizedClients:
    get:
      consumes:
      - application/json
      description: It returns all clients that have only openid access for the logged-in
        user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.AuthorizedClientsResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: returns all only-openid authorized clients
      tags:
      - OAuth2
  /oauth/rejectConsent:
    post:
      consumes:
      - application/json
      description: is used to reject consent.
      parameters:
      - description: consent_id
        in: body
        name: consent_id
        required: true
        schema:
          type: string
      - description: failure_reason
        in: body
        name: failure_reason
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: redirect response
          headers:
            Location:
              description: redirect_uri
              type: string
          schema:
            $ref: '#/definitions/dto.RedirectResponse'
        "400":
          description: invalid input
          headers:
            Location:
              description: redirect_uri
              type: string
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Consent Rejection.
      tags:
      - OAuth2
  /oauth/revokeClient:
    post:
      consumes:
      - application/json
      description: It is used by the user in case he/she wants to revoke access for
        a certain client.
      parameters:
      - description: revokeBody
        in: body
        name: revokeBody
        required: true
        schema:
          $ref: '#/definitions/request_models.RevokeClientBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: revokes client access
      tags:
      - OAuth2
  /oauth/scopes:
    get:
      consumes:
      - application/json
      description: returns all scopes that satisfy given filters
      parameters:
      - in: query
        name: filter
        type: string
      - in: query
        name: link_operator
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: per_page
        type: integer
      - in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.Scope'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: returns all scopes that satisfy given filters
      tags:
      - scope
    post:
      consumes:
      - application/json
      description: Create a new scope
      operationId: create-scope
      parameters:
      - description: Create a new scope
        in: body
        name: scope
        required: true
        schema:
          $ref: '#/definitions/dto.Scope'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.Scope'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new scope
      tags:
      - scope
  /oauth/scopes/{name}:
    delete:
      consumes:
      - application/json
      description: Delete  scope
      parameters:
      - description: name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete  scope
      tags:
      - scope
    get:
      consumes:
      - application/json
      description: Get a scope
      operationId: get-scope
      parameters:
      - description: Scope name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Scope'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a scope
      tags:
      - scope
  /oauth/token:
    post:
      consumes:
      - application/json
      description: is used to exchange token.
      parameters:
      - description: tokenParam
        in: body
        name: tokenParam
        required: true
        schema:
          $ref: '#/definitions/dto.AccessTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenResponse'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: no record of code found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: exchange token.
      tags:
      - OAuth2
  /otp:
    get:
      consumes:
      - application/json
      description: is used to request otp for login and signup
      parameters:
      - description: phone
        in: query
        name: phone
        required: true
        type: string
      - description: type can be login or signup
        enum:
        - login
        - signup
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Request otp.
      tags:
      - auth
  /profile:
    get:
      consumes:
      - application/json
      description: get's user profile.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: get's user profile.
      tags:
      - profile
    put:
      consumes:
      - application/json
      description: update user profile.
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: update user profile.
      tags:
      - profile
  /profile/picture:
    put:
      consumes:
      - multipart/form-data
      description: update user profile picture.
      parameters:
      - description: image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: update user profile picture.
      tags:
      - profile
  /refreshToken:
    get:
      consumes:
      - application/json
      description: refresh access token.
      parameters:
      - description: refreshTokenParam
        in: body
        name: tokenParam
        required: true
        schema:
          $ref: '#/definitions/dto.InternalRefreshTokenRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: refresh access token.
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user.
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Register a new user.
      tags:
      - auth
  /resourceServers:
    get:
      consumes:
      - application/json
      description: returns all resource servers based on the filters and pagination
        given
      parameters:
      - in: query
        name: filter
        type: string
      - in: query
        name: link_operator
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: per_page
        type: integer
      - in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ResourceServer'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: returns all resource servers that satisfy the given filters
      tags:
      - resourceServer
    post:
      consumes:
      - application/json
      description: Create a new resource server
      parameters:
      - description: resource_server
        in: body
        name: client
        required: true
        schema:
          $ref: '#/definitions/dto.ResourceServer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ResourceServer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a resource server
      tags:
      - resourceServer
  /roles/permissions:
    get:
      consumes:
      - application/json
      description: Get all permissions that are predefined and fixed for this server
      operationId: get-all-permissions
      parameters:
      - description: category of permissions
        in: body
        name: category
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/permissions.Permission'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all permissions
      tags:
      - role
  /users:
    get:
      consumes:
      - application/json
      description: returns all users based on the filters and pagination given
      parameters:
      - in: query
        name: filter
        type: string
      - in: query
        name: link_operator
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: per_page
        type: integer
      - in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: returns all users that satisfy the given filters
      tags:
      - user
    post:
      consumes:
      - application/json
      description: create a new user.
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: create a new user.
      tags:
      - user
  /users/{id}:
    get:
      consumes:
      - application/json
      description: get user details.
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: get user details.
      tags:
      - user
  /users/{id}/status:
    patch:
      consumes:
      - application/json
      description: changes user status to ACTIVE or INACTIVE
      parameters:
      - description: user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: changes user status
      tags:
      - user
  /users/{phone}/exists:
    get:
      consumes:
      - application/json
      description: check's if phone exists.
      parameters:
      - description: phone
        in: path
        name: phone
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MiniRideResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BasicAuth: []
      summary: check's if phone exists.
      tags:
      - miniRide
securityDefinitions:
  BasicAuth:
    type: basic
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
